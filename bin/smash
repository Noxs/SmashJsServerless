#!/usr/bin/env node

'use strict';
var program = require('commander');
var glob = require('glob');
var path = require('path');
const cliPath = "../lib/cli";


//TODO improve this file
//build smashCli object
function SmashCli() {

}

var loadCliModules = function () {
    var files = glob.sync(path.resolve(path.join(__dirname, cliPath, "**/*.js")));
    var modules = [];
    files.forEach(function (file) {
        modules.push(require(path.resolve(file)));
    });
    return modules;
};

loadCliModules();

var utils = require("../lib/utils.js");
var controllerGenerator = require("../lib/controllerGenerator.js");

program.command('init')
        .description('initialize smash configuration')
        .action(function () {
            var modules = loadCliModules();
            var promises = [];
            for (var i = 0, length = modules.length; i < length; i++) {
                if (modules[i].init) {
                    promises.push(modules[i].init());
                }
            }
            Promise.all(promises).then(function () {
                console.log("Successfully init modules.");
                process.exit(0);
            }, function (error) {
                console.log("Failed init modules.", error);
                process.exit(1);
            });
        });

//here put self update

program.command('init:aws')
        .description('initialize lambda index.js, codebuild buildspec.yml, smash config.json, and directories')
        .action(function () {
            utils.initAws();
            process.exit(0);
        });

program.command('init:lambda')
        .description('initialize lambda index.js')
        .action(function () {
            utils.initLambda();
            process.exit(0);
        });

program.command('init:config')
        .description('initialize smash config.json')
        .action(function () {
            utils.initConfig();
            process.exit(0);
        });

program.command('init:codebuild')
        .description('initialize codebuild buildspec.yml')
        .action(function () {
            utils.initCodebuild();
            process.exit(0);
        });

program.command('init:directories')
        .description('initialize directories structure')
        .action(function () {
            utils.initDirectories();
            process.exit(0);
        });

program.command('controller <name>')
        .description('create controller file')
        .action(function (name) {
            controllerGenerator.createNewController(name);
            process.exit(0);
        });

program.command('database <name>')
        .description('create database file')
        .action(function (name) {
            utils.createNewDatabase(name);
            process.exit(0);
        });

program.command('utils <name>')
        .description('create util file')
        .action(function (name) {
            utils.createNewUtil(name);
            process.exit(0);
        });

program.command('rest <name>')
        .description('create rest endpoint')
        .action(function (name) {
            utils.createNewDatabase(name);
            controllerGenerator.createNewRest(name);
            process.exit(0);
        });


program.parse(process.argv);